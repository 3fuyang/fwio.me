---
import { type CollectionEntry } from 'astro:content'

interface Post extends Pick<CollectionEntry<'blog'>, 'data'> {
  slug: string
}

export interface Props {
  posts: Post[]
}

const { posts } = Astro.props

const postsByYear = groupPostsByYear(posts)

function groupPostsByYear(posts: Post[]) {
  const postsOfYearMap: Record<number, Post[]> = {}

  for (const post of posts) {
    const year = post.data.pubDate.getFullYear()

    if (!year) continue

    if (!postsOfYearMap[year]) {
      postsOfYearMap[year] = []
    }

    postsOfYearMap[year].push(post)
  }

  const postsOfYearEntries = Object.entries(postsOfYearMap).sort(
    (a, b) => Number(b[0]) - Number(a[0]),
  )

  const result = postsOfYearEntries.map(([year, posts]) => ({ year, posts }))

  return result
}
---

<div class="mx-auto max-w-xl">
  {
    postsByYear.map(({ year, posts }) => (
      <section class="relative py-4">
        <h2 class="year-marker pointer-events-none absolute top-0 left-0 text-4xl text-transparent opacity-50 select-none">
          {year}
        </h2>
        <div class="space-y-6">
          {posts.map(({ slug, data: { title, pubDate } }) => {
            const dateTime = new Date(pubDate).toLocaleDateString('en-US')

            return (
              <article id={('_' + slug.split('/').at(-1)) as string}>
                <a
                  href={slug}
                  class:list={[
                    'ml-2 block rounded-sm px-1',
                    'text-foreground/90 hover:text-foreground focus-visible:text-foreground',
                    'block',
                    'transition-colors',
                    'group',
                  ]}
                >
                  <h3
                    title={title}
                    class="truncate text-base tracking-wide underline-offset-4 group-hover:underline group-focus-visible:underline"
                  >
                    {title}
                  </h3>
                  <time
                    class="text-foreground/60 text-xs sm:text-sm"
                    datetime={dateTime}
                  >
                    {dateTime}
                  </time>
                </a>
              </article>
            )
          })}
        </div>
      </section>
    ))
  }
</div>

<script>
  window.addEventListener('pageswap', async (e) => {
    const et = e as PageSwapEvent
    if (!et.viewTransition) {
      return
    }

    const targetUrl = new URL(et.activation!.entry.url!)

    if (isPostPage(targetUrl)) {
      const post = extractPostSlugFromUrl(targetUrl)

      const heading = document.querySelector(
        `#_${post} h3`,
      ) as HTMLElement | null
      const date = document.querySelector(
        `#_${post} time`,
      ) as HTMLElement | null

      if (!heading || !date) {
        return
      }

      setTemporaryViewTransitionNames(
        [
          [heading, 'heading'],
          [date, 'date'],
        ],
        et.viewTransition.finished,
      )
    }
  })

  window.addEventListener('pagereveal', async (e) => {
    const et = e as PageRevealEvent

    if (!et.viewTransition || !(window.navigation as any)?.activation) {
      return
    }

    const fromUrl = new URL(
      ((window.navigation as any).activation as NavigationActivation).from
        ?.url as string,
    )
    const currentUrl = new URL(
      ((window.navigation as any).activation as NavigationActivation).entry
        ?.url as string,
    )

    if (isPostPage(fromUrl) && isListPage(currentUrl)) {
      const post = extractPostSlugFromUrl(fromUrl)

      const heading = document.querySelector(
        `#_${post} h3`,
      ) as HTMLElement | null
      const date = document.querySelector(
        `#_${post} time`,
      ) as HTMLElement | null

      if (!heading || !date) {
        return
      }

      setTemporaryViewTransitionNames(
        [
          [heading, 'heading'],
          [date, 'date'],
        ],
        et.viewTransition.ready,
      )
    }
  })

  function isPostPage(url: URL) {
    return /^\/blog|notes\/\w/.test(url.pathname)
  }

  function isListPage(url: URL) {
    return ['/', '/blog', '/notes'].includes(url.pathname)
  }

  function extractPostSlugFromUrl(url: URL) {
    try {
      return url.pathname.split('/').at(-1) as string
    } catch {
      return ''
    }
  }

  async function setTemporaryViewTransitionNames(
    entries: [HTMLElement, string][],
    vtPromise: Promise<void>,
  ) {
    for (const [$el, name] of entries) {
      $el.style.viewTransitionName = name
    }

    await vtPromise

    for (const [$el] of entries) {
      $el.style.viewTransitionName = ''
    }
  }
</script>
